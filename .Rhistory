source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
devtools::test()
devtools::test()
set.seed(123)
unweight <- ClusterRankPois(poisData$lbw,poisData$births, row_names=poisData$county,weighted=FALSE)
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
unweight <- ClusterRankPois(poisData$lbw,poisData$births, row_names=poisData$county,weighted=FALSE)
unweight$theta
weight
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
unweight <- ClusterRankPois(poisData$lbw,row_names=poisData$county,weighted=FALSE)
unweight
devtools::test()
v
unweight_rank <- ClusterRankPois(poisData$lbw, row_names=poisData$county, scale=rank, weighted=FALSE)
unweight_rank$theta
as.vector(unweight_rank$ranked_table$name)
weight_rank <- ClusterRankPois(poisData$lbw, row_names=poisData$county, scale=rank, weighted=TRUE)
weight_rank$theta
as.vector(weight_rank$ranked_table$name)
set.seed(123)
unweight <- ClusterRankNorm(normData$mean,se = normData$se, row_names=normData$county,weighted=FALSE)
unweight
devtools::test()
set.seed(123)
unweight <- ClusterRankNorm(normData$mean,se = normData$se, row_names=normData$county,weighted=FALSE)
unweight$theta
as.vector(unweight$ranked_table$name)
weight <- ClusterRankNorm(normData$mean,se = normData$se, row_names=normData$county,weighted=TRUE)
as.vector(weight$ranked_table$name)
unweight_rank <- ClusterRankNorm(normData$mean,se = normData$se, row_names=normData$county, scale=rank, weighted=FALSE)
as.vector(unweight_rank$ranked_table$name)
weight_rank <- ClusterRankNorm(normData$mean,se = normData$se, row_names=normData$county, scale=rank, weighted=TRUE)
as.vector(weight_rank$ranked_table$name)
devtools::test()
set.seed(123)
unweight_rank <- ClusterRankPois(poisData$lbw, row_names=poisData$county, scale=rank, weighted=FALSE)
as.vector(unweight_rank$ranked_table$name)
weight_rank <- ClusterRankPois(poisData$lbw, row_names=poisData$county, scale=rank, weighted=TRUE)
as.vector(weight_rank$ranked_table$name)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
pnorm(.95)
pnorm(.975)
dnorm(0.975)
qnorm(0.975)
alpha = 0.5
alpha1 = alpha/2
alpha2 = 1-alpha1
alpha1
alpha2
alpha = 0.05
alpha1 = alpha/2
alpha2 = 1-alpha1
alpha1
alpha2
Z_alpha1 = qnorm(alpha1)
Z_alpha2 = qnorm(alpha2)
Z_alpha1
Z_alpha2
WilsonHilfertyPoiCI <- function (x, ti, conf.level=0.95) {
est = y/ti
est1 = est+1
alpha = 1 - conf.level
alpha1 = alpha/2
alpha2 = 1-alpha1
Z_alpha1 = qnorm(alpha1)
Z_alpha2 = qnorm(alpha2)
lower = est*(1-(1/9)*est + (Z_alpha1/3)*sqrt(est))^3
upper = est1*(1-(1/9)*est1 + (Z_alpha2/3)*sqrt(est1))^3
return(c(est,lower, upper))
}
WilsonHilfertyPoiCI(10, 1, conf.level=0.95)
WilsonHilfertyPoiCI <- function (x, ti, conf.level=0.95) {
est = x/ti
est1 = est+1
alpha = 1 - conf.level
alpha1 = alpha/2
alpha2 = 1-alpha1
Z_alpha1 = qnorm(alpha1)
Z_alpha2 = qnorm(alpha2)
lower = est*(1-(1/9)*est + (Z_alpha1/3)*sqrt(est))^3
upper = est1*(1-(1/9)*est1 + (Z_alpha2/3)*sqrt(est1))^3
return(c(est,lower, upper))
}
WilsonHilfertyPoiCI(10, 1, conf.level=0.95)
WilsonHilfertyPoiCI <- function (x, ti, conf.level=0.95) {
# calculates approximate Poisson CI by Wilson & Hilferty (1931)
est = x/ti
est1 = est+1
alpha = 1 - conf.level
alpha1 = 1-alpha/2
Z_alpha1 = qnorm(alpha1)
lower = est*(1-(1/(9*est)) - (Z_alpha1/(3*sqrt(est))))^3
upper = est1*(1-(1/(9*est1)) + (Z_alpha1/(3*sqrt(est1))))^3
return(c(est,lower, upper))
}
WilsonHilfertyPoiCI(10, 1, conf.level=0.95)
WilsonHilfertyPoiCI(33, 1, conf.level=0.95)
devtools::test()
devtools::test()
devtools::test()
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
y = binData$lbw
n = binData$births
row_names=binData$county
weighted=FALSE
N <- length(y)
if(missing(n)){
stop("n required for binomial data")
}
npmle_res <- npmleBin(y=y,n=n,k=k,n.iter=n.iter,row_names=row_names)
k = NULL
npmle_res <- npmleBin(y=y,n=n,k=k,n.iter=n.iter,row_names=row_names)
n.iter=1000
npmle_res <- npmleBin(y=y,n=n,k=k,n.iter=n.iter,row_names=row_names)
View(npmle_res)
smp <- apply(npmle_res$post_theta,1,
function(x,theta,n.samp)
sample(theta,n.samp,replace=TRUE,prob=x),
theta=scale(npmle_res$theta),n.samp=n.samp)
n.samp = 10000
smp <- apply(npmle_res$post_theta,1,
function(x,theta,n.samp)
sample(theta,n.samp,replace=TRUE,prob=x),
theta=scale(npmle_res$theta),n.samp=n.samp)
View(smp)
npmle_res
View(npmle_res)
smp <- t(smp) #transposes
smp.ord <- apply(smp,2,sort) #sorts samples by ??
View(smp.ord)
wgt <- rep(1,N)
lossRank <- matrix(NA,N,N)
for (i in 1:N) {
for (j in 1:N) {
lossRank[i,j] <- wgt[i] * mean((smp[i,]-smp.ord[j,])^2)
}
}
dim(smp)
dim(smp.ord)
lossRank <- matrix(NA,N,N)
for (i in 1:N) {
for (j in 1:N) {
lossRank[i,j] <- wgt[i] * mean((smp[i,]-smp.ord[j,])^2)
}
}
totalRankLoss = sum(lossRank)
rnk <- as.numeric(clue::solve_LSAP(lossRank))
rnk
lossCluster <- matrix(NA,n,n)
for (i in 1:n) {
for (j in 1:length(theta)) {
lossCluster[i,j] <- mean((smp[i,]-npmle$theta[j,])^2)
}
}
for (i in 1:n) {
for (j in 1:length(npmle$theta)) {
lossCluster[i,j] <- mean((smp[i,]-npmle$theta[j,])^2)
}
}
lossCluster <- matrix(NA,n,length(npmle_res$theta))
for (i in 1:n) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-npmle_res$theta[j,])^2)
}
}
n = 8
for (i in 1:n) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-npmle_res$theta[j,])^2)
}
}
lossCluster <- matrix(NA,n,length(npmle_res$theta))
for (i in 1:n) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-npmle_res$theta[j])^2)
}
}
View(lossCluster)
dim(smp)
lossCluster <- matrix(NA,n,length(npmle_res$theta))
for (i in 1:n) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[,i]-npmle_res$theta[j])^2)
}
}
View(lossCluster)
for (i in 1:n) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-npmle_res$theta[j])^2)
}
}
totalClusterLoss = sum(lossCluster)
cluster <- solve_LSAP(lossCluster)
lossCluster <- matrix(NA,n,length(npmle_res$theta))
for (i in 1:n) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-npmle_res$theta[j])^2)
}
}
cluster <- clue::solve_LSAP(lossCluster)
rnk <- as.numeric(clue::solve_LSAP(lossRank))
lossCluster <- matrix(NA,n,length(npmle_res$theta))
for (i in 1:n) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-smp.ord[j,])^2)
}
}
lossCluster <- matrix(NA,n,length(npmle_res$theta))
for (i in 1:n) {
for (j in 1:n)) {
lossCluster[i,j] <- mean((smp[i,]-smp.ord[j,])^2)
}
}
lossCluster <- matrix(NA,n,length(npmle_res$theta))
for (i in 1:n) {
for (j in 1:n)) {
lossCluster[i,j] <- mean((smp[i,]-smp.ord[j,])^2)
}
}
lossCluster <- matrix(NA,n,length(npmle_res$theta))
for (i in 1:n) {
for (j in 1:n) {
lossCluster[i,j] <- mean((smp[i,]-smp.ord[j,])^2)
}
}
lossCluster <- matrix(NA,n,length(npmle_res$theta))
for (i in 1:n) {
for (j in 1:n) {
lossCluster[i,j] <- mean((smp[i,]-smp.ord[,j])^2)
}
}
# square error loss cluster optimization #TODO unweighted, right?
lossCluster <- matrix(NA,n,n))
for (i in 1:n) {
for (j in 1:n) {
lossCluster[i,j] <- mean((smp[i,]-smp.ord[,j])^2)
}
}
lossCluster <- matrix(NA,n,n))
for (i in 1:n) {
for (j in 1:n) {
lossCluster[i,j] <- mean((smp[i,]-smp.ord[j,])^2)
}
}
n = binData$births
N = 8
lossCluster <- matrix(NA,N,N))
for (i in 1:N) {
for (j in 1:N) {
lossCluster[i,j] <- mean((smp[i,]-smp.ord[j,])^2)
}
}
lossCluster <- matrix(NA,N,N))
for (i in 1:N) {
for (j in 1:N) {
lossCluster[i,j] <- mean((smp[i,]-smp.ord[j,])^2)
}
}
# square error loss cluster optimization #TODO unweighted, right?
lossCluster <- matrix(NA,N,N))
# square error loss cluster optimization #TODO unweighted, right?
lossCluster <- matrix(NA,N,N)
for (i in 1:N) {
for (j in 1:N) {
lossCluster[i,j] <- mean((smp[i,]-smp.ord[j,])^2)
}
}
totalClusterLoss = sum(lossCluster)
View(lossCluster)
post_theta
npmle_res$post_theta
clue::solve_LSAP(npmle_res$post_theta)
npmle_res[["post_theta"]]
dim(lossRank)
lossRank
smp[1,]
smp[,1]
dim(smp)
exp(smp)
exp(smp[,1])
scale(npmle_res$theta)
smp[,1]
View(lossCluster)
apply(smp.ord,1,getmode)
match(apply(smp.ord,1,getmode),scale(npmle_res$theta))
lossCluster
smp.ord[,1]
# square error loss cluster optimization
lossCluster <- matrix(NA,N,N)
for (i in 1:N) {
for (j in 1:N) {
lossCluster[i,j] <- mean((smp[i,]-scale(npmle_res$theta))^2)
}
}
scale(npmle_res$theta
)
scale(npmle_res$theta)
# square error loss cluster optimization
lossCluster <- matrix(NA,N,length(npmle_res$theta))
for (i in 1:N) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-scale(npmle_res$theta[j]))^2)
}
}
# square error loss cluster optimization
lossCluster <- matrix(NA,N,length(npmle_res$theta))
for (i in 1:N) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-scale(npmle_res$theta[j]))^2)
}
}
warnings()
# square error loss cluster optimization
lossCluster <- matrix(NA,N,length(npmle_res$theta))
# square error loss cluster optimization
lossCluster <- matrix(NA,N,length(npmle_res$theta))
for (i in 1:N) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-c(npmle_res$theta[j]))^2)
}
}
lossCluster
apply(lossCluster, 1, which.min)
match(apply(smp.ord,1,getmode),scale(npmle_res$theta))[rnk]
apply(smp.ord,1,getmode)
clusters = apply(lossCluster, 2, which.min) #one way to assign groups
clusters
apply(lossCluster, 1, which.min)
lossCluster
dim(smp)
lossCluster <- matrix(NA,N,length(npmle_res$theta))
for (i in 1:N) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-c(npmle_res$theta[j]))^2)
}
}
lossCluster
clusters = apply(lossCluster, 1, which.min) #one way to assign groups
clusters
clusters = apply(lossCluster, 2, which.min) #one way to assign groups
clusters
clusters = apply(lossCluster, 1, which.min) #one way to assign groups
cluster <- clue::solve_LSAP(lossCluster)
cluster <- clue::solve_LSAP(t(lossCluster))
cluster
# square error loss cluster optimization
lossCluster <- matrix(NA,length(npmle_res$theta,N))
# square error loss cluster optimization
lossCluster <- matrix(NA,length(npmle_res$theta),N)
for (j in 1:length(npmle_res$theta)) {
for (i in 1:N) {
lossCluster[j,i] <- mean((smp[i,]-c(npmle_res$theta[j]))^2)
}
}
lossCluster
cluster <- clue::solve_LSAP(lossCluster)
cluster
cluster <- clue::solve_LSAP(t(lossCluster))
clusters = apply(lossCluster, 1, which.min) #one way to assign groups
scale(npmle_res$theta)
smp.ord[,1]
# square error loss cluster optimization
lossCluster <- matrix(NA,N,length(npmle_res$theta))
for (i in 1:N)) {
for (j in 1:length(npmle_res$theta) {
lossCluster[i,j] <- mean((smp[i,]-c(scale(npmle_res$theta)[j]))^2)
}
}
# square error loss cluster optimization
lossCluster <- matrix(NA,N,length(npmle_res$theta))
for (i in 1:N) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-c(scale(npmle_res$theta)[j]))^2)
}
}
clusters = apply(lossCluster, 1, which.min) #one way to assign groups
clusters
cluster <- clue::solve_LSAP(t(lossCluster))
cluster
# square error loss cluster optimization
lossCluster <- matrix(NA,N,length(npmle_res$theta))
for (i in 1:N) {
for (j in 1:length(npmle_res$theta)) {
lossCluster[i,j] <- mean((smp[i,]-c(scale(npmle_res$theta)[j]))^2)
}
}
totalClusterLoss = sum(lossCluster)
clusters = apply(lossCluster, 1, which.min) #one way to assign groups
clusters
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
unweight <- ClusterRankBin(binData$lbw,binData$births,row_names=binData$county,weighted=FALSE)
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
unweight <- ClusterRankBin(binData$lbw,binData$births,row_names=binData$county,weighted=FALSE)
unweight
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
devtools::test()
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
devtools::test()
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
devtools::test()
PlotClusterRank(unweight)
unweight$ranked_table
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
PlotClusterRank(unweight)
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
PlotClusterRank(unweight)
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
devtools::test()
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
apply(smp.ord, 1, table)
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
dim(smp.ord)
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
apply(smp.ord, 1, function(x, levels) table(factor(x, levels = levels), levels=npmle_res$theta))
apply(smp.ord, 1, function(x, levels) table(factor(x, levels = levels)), levels=npmle_res$theta)
apply(round(smp.ord,6), 1, function(x, levels) table(factor(x, levels = levels)), levels=round(npmle_res$theta,6))
table(smp.ord[1,])
apply(round(smp.ord,6), 1, function(x, levels) table(factor(x, levels = levels)), levels=round(scale(npmle_res$theta),6))
apply(round(smp.ord,6), 1, function(x, levels) table(factor(x, levels = levels))/length(x), levels=round(scale(npmle_res$theta),6))
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
source('~/git_repos/ClusterRank/R/ClusterRankingFunctions.R')
devtools::test()
devtools::test()
devtools::test()
